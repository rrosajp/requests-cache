name: Build

on:
  push:
    branches: [master]
    tags: ['v*']
  pull_request:
    branches: [master]
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:
env:
  LATEST_PY_VERSION: 3.9
  COVERAGE_ARGS: '--cov --cov-report=term --cov-report=html'
  COMPLEXITY_ARGS: '--show-complexity --average --order SCORE'

jobs:
  # Run tests for each supported python version
  test:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, 3.10.0-beta.2]
      fail-fast: false
    services:
      nginx:
        image: kennethreitz/httpbin
        ports:
          - 80:80

    steps:
      # Set up python + poetry
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: snok/install-poetry@v1.1.6
        with:
          version: 1.2.0a1
          virtualenvs-in-project: true

      # Start integration test databases
      - uses: supercharge/mongodb-github-action@1.6.0
        with:
          mongodb-version: 4.4
      - uses: supercharge/redis-github-action@1.2.0
        with:
          redis-version: 6
      - uses: rrainn/dynamodb-action@v2.0.0

      # Cache packages per python version, and reuse until lockfile changes
      - name: Cache python packages
        id: cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ matrix.python-version }}-latest-${{ hashFiles('poetry.lock') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install -v -E all
      - name: Install latest available requests + urllib3 (scheduled tests only)
        if: ${{ github.event.schedule }}
        run: |
          poetry add requests@latest
          poetry add urllib3@latest
      - name: Workaround for issue with poetry package extras (python 3.10 only)
        if: ${{ startsWith(matrix.python-version, '3.10') }}
        run: |
          source $VENV
          pip install -U cattrs

      # Run tests with coverage report
      - name: Run tests
        run: |
          source $VENV
          pytest -rs -x tests/unit --numprocesses=auto ${{ env.COVERAGE_ARGS }}
          pytest -rs -x tests/integration --cov-append ${{ env.COVERAGE_ARGS }}

      # Latest python version: send coverage report to coveralls
      - name: Run coveralls
        if: ${{ matrix.python-version == env.LATEST_PY_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          source $VENV
          pip install coveralls
          coveralls --service=github


  # Run code analysis checks
  analyze:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.LATEST_PY_VERSION }}
      - uses: snok/install-poetry@v1.1.6
        with:
          version: 1.2.0a1
          virtualenvs-in-project: true

      # Cache packages and reuse until lockfile changes
      - name: Cache python packages
        id: cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ env.LATEST_PY_VERSION }}-latest-${{ hashFiles('poetry.lock') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install -v -E all

      - name: Run style checks & linting
        run: |
          source $VENV
          black --check --diff .
          isort --check --diff .
          flake8 .
          mypy requests_cache
      - name: Run cyclomatic complexity check
        run: poetry run radon cc ${{ env.COMPLEXITY_ARGS }} requests_cache
